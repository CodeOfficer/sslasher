#!/usr/bin/env ruby -wKU

# ~/.ssl
	home					= "#{ `echo $HOME` }".strip
	ssl_csr_file 	= "#{ home }/.ssl/sslasher.csr"
	ssl_key_file 	= "#{ home }/.ssl/sslasher.key"

# Rails.root
	pwd						= "#{ `pwd` }".strip
	config_file  	= "#{ pwd }/config/sslasher.conf"
	pid_file  		= "#{ pwd }/tmp/pids/nginx.pid"
	ssl_conf			= "#{ pwd }/config/sslasher.conf"

unless FileTest.exists?(ssl_csr_file) && FileTest.exists?(ssl_key_file)
	puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	puts "Before you can use Sslasher, we need to generate your self signed ssl certificate. Execute the following command and then run sslasher again."
	puts
	puts "rake sslasher:create_certificate"
	puts
	puts "This will create your self-signed cert in ~/.ssl/*"
	puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	exit 0
end

unless FileTest.exists?(config_file)
	puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	puts "We need to generate a NGINX config file for you. Execute the following command and then run sslasher again."
	puts
	puts "rake sslasher:create_config[port]"
	puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	exit 0
end

if FileTest.exists?(pid_file)
	args     = ARGV.join(' ')
	command  = "sudo nginx -c #{ssl_conf} -s stop #{args}"
	puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	puts "Quiting the server with:"
	puts
	puts "#{command}"
	puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
else
	args     = ARGV.join(' ')
	command  = "sudo nginx -c #{ssl_conf} #{args}"
	puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	puts "We need to run NGINX with sudo access so it can bind to ports"
	puts "80 for HTTP and 443 for HTTPS. We'll then proxy both of those"
	puts "ports to your Rails app running with webrick, mongrel, unicorn"
	puts "or whatever."
	puts
	puts "Starting the server with:"
	puts
	puts "#{command}"
	puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
end

`#{command}`
